clear all;
clc;

% SOLVER OPTIONS
verbose     = 1;
tolerance   = 1e-8;

% OUTPUT OPTIONS
ssave   = 1; % Save the results ?
pplot   = 1; % Plot the results ?
folder = 'SaveData/';           % If results saved, name of the saving folder
nname  = 'FastGradientD2.dat';  % Name of the file

% MINIMIZATION PROBLEM SETUP
L = 1;      % Smoothness constant
m = 0;      % Strong convexity constant
N = 100;    % Number of iterations

% INTERMEDIARY POTENTIAL SETUPS (aims at reproducing results from Appendix
% C.3; Figure 4) via option "relaxation".
% Options:
%   Set relax = 0: use the base potential stated in Section 3.2.1.
%   Set relax = 1: force ak = L/2; Qk = 0
%   Set relax = 2: force ak = L/2, Qk(1,1)=Qk(1,2)=0, Qk(2,2)=dk/2/L

relax = 2;

% INITIAL AND FINAL POTENTIALS SETUP:
% Potential has the form:
%   Q(1,1) ||x_k-x*||^2 + Q(2,2) ||F'(x_k)||^2 + 2 Q(1,2) <F'(x_k); x_k-x*>
%       + ak ||z_k-x*||^2 + dk (F(x_k)-f(x*)).

Q0 = zeros(2);
a0 = L/2;
d0 = 0;

tau = sdpvar(1); % variable to be maximized (see problem (12) in the paper)
QN  = zeros(2);
aN  = 0;
dN  = tau;

if relax == 1
    a0 = L/2; aN = L/2;
    Q0 = zeros(2); QN = zeros(2);
elseif relax == 2
    a0 = L/2; aN = L/2;
    Q0 = [0 0; 0 d0/2/L]; QN = [0 0; 0 dN/2/L];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                              %
% SETTING UP THE NOTATIONS FOR THE LINEAR MATRIX INEQUALITIES  %
%                   (end of editable zone)                     %
%                                                              %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Minimization of f(x)  with f smooth (possibly strongly) convex.
% Recall that x* (optimum) is set to x* = 0 without loss of generality,
% and so does f(x*) = 0.

% P = [ z_k  y_k  y_{k+1} f'(y_k) f'(y_{k+1})  ]
% F = [                   f(y_k)  f(y_{k+1})   ]

dimG  = 5; % dimensions of the Gram matrix P.'*P
dimF  = 2; % dimensions of F
nbPts = 3; % number of points to be incorporated in the discrete
% version of the function f: x*, y_k, y_{k+1}


zk  = zeros(1, dimG); zk(1)  = 1; % this is z_k
yk  = zeros(1, dimG); yk(2)  = 1; % this is y_k
yk1 = zeros(1, dimG); yk1(3) = 1; % this is y_{k+1}
xs  = zeros(1, dimG);             % this is x*

gyk = zeros(1, dimG); gyk(4) = 1; % this is f'(y_k)
gyk1= zeros(1, dimG);gyk1(5) = 1; % this is f'(y_{k+1})
gxs = zeros(1, dimG);             % this is f'(x*)

fyk = zeros(1, dimF); fyk(1) = 1; % this is f(y_k)
fyk1= zeros(1, dimF);fyk1(2) = 1; % this is f(y_{k+1})
fxs = zeros(1, dimF);             % this is f(x*)

% POINTS IN THE DISCRETE REPRESENTATION OF FUNCTION f(.)
XX = {  xs,  yk,    yk1}; % coordinates 
GG = { gxs, gyk,   gyk1}; % gradients
FF = { fxs, fyk,   fyk1}; % function values

% line-search for y_{k+1}
A{1} = gyk1.'*(yk-yk1);   A{1} = 1/2*(A{1}+A{1}.'); % <f'(y_{k+1}); y_{k+1}-x_k> == 0
A{2} = gyk1.'*(zk-yk);    A{2} = 1/2*(A{2}+A{2}.');
A{3} = gyk1.'* gyk;       A{3} = 1/2*(A{3}+A{3}.');

A{1} = gyk1.'*(yk1-xk);   A{1} = 1/2*(A{1}+A{1}.'); 
A{2} = gyk1.'*(zk-xk);    A{2} = 1/2*(A{2}+A{2}.'); % <f'(y_{k+1}); z_k    -x_k> == 0
% line-search for x_{k+1}
A{3} = gxk1.'*(yk1-xk1);  A{3} = 1/2*(A{3}+A{3}.'); % <f'(x_{k+1}); y_{k+1}-x_{k+1}> == 0
A{4} = gxk1.'*gyk1;       A{4} = 1/2*(A{4}+A{4}.'); % <f'(x_{k+1}); f'(y_{k+1})> == 0

% Matrix encoding interpolation condition for smooth strongly convex functions
M = 1/2/(L-m) *[  -L*m,  L*m,   m, -L;
    L*m, -L*m,  -m,  L;
    m,   -m,  -1,  1;
    -L,   L,   1,  -1];

% Notations for potentials
statesKG  = [xk-xs; gxk];     statesKF  = fxk-fxs;
statesK1G = [xk1-xs; gxk1];   statesK1F = fxk1-fxs;







% Potential function
statesKx  = [yk-xs;   gyk];   statesKf  = fyk-fxs;
statesK1x = [yk1-xs; gyk1];   statesK1f = fyk1-fxs;


% line search for yk1



dimQ = 2; % in the same ordering: yk-x* | f'(yk)
dimq = 1; % in the same ordering f(yk)-f* 
Q0x = zeros(dimQ);  Q0x(1,1) = 0; Q0x(2,2) = 0;
Q0z = L/2; 
q0 = zeros(dimq,1); q0(1,1) =  0;

tau = sdpvar(1);
% QNx = zeros(dimQ); QNx(1,1) = 0;
QNz = L/2; %QNx(2,2) = tau;
QNx = [ 0 0; 0 -tau/2/L];
qN = tau;

%%

M        = 1/2/(L-m) *[  -L*m, L*m,  m,   -L; L*m,  -L*m,  -m,    L;    m,    -m,  -1,  1 ;    -L,   L,   1,  -1];

Vx{1}   = Q0x;
vx{1}   = q0;
Vx{N+1} = QNx;
vx{N+1} = qN;
Vz{1}   = Q0z;
Vz{N+1} = QNz;

cons = (tau >= 0);
for kl = 1 : N
    if kl < N
                Vx{kl+1} = sdpvar(2);
                vx{kl+1} = sdpvar(1);
%                 Vz{kl+1} = sdpvar(1);
                Vx{kl+1} = zeros(2);
        %         Vx{kl+1}(2,2) = sdpvar(1);
        %         Vx{kl+1} = [0 0 ; 0 sdpvar(1)];
%         vx{kl+1} = sdpvar(1);
        Vx{kl+1} = [ 0 0; 0 -vx{kl+1}/2/L];
        Vz{kl+1} = L/2;
    end
    
    lambda{kl}    = sdpvar(nbPts,nbPts,'full');
    lambdaLSY{kl} = sdpvar(3,1);
    
    
    SStep{kl} = sdpvar(4); cons = cons + (SStep{kl} >= 0); cons = cons + (SStep{kl}(1,1) == Vz{kl+1});
    cons_SDP{kl} = - Vz{kl} * (zk-xs).'*(zk-xs) - statesKx.'*Vx{kl}*statesKx +  [yk1;  zk-yk1; gyk; gyk1].'*SStep{kl}*[yk1; zk-yk1; gyk; gyk1] + statesK1x.'*Vx{kl+1}*statesK1x;
    for i = 1:3
        cons_SDP{kl} = cons_SDP{kl} + lambdaLSY{kl}(i) * consLSY{i};
    end
    cons_LIN{kl} = - vx{kl}.'*statesKf + vx{kl+1}.'*statesK1f;
    
    for i = 1:nbPts
        for j = 1:nbPts
            if j ~= i
                xi = XX{i}; xj = XX{j};
                gi = GG{i}; gj = GG{j};
                fi = FF{i}; fj = FF{j};
                TT = [xi; xj; gi; gj];
                
                cons_SDP{kl} = cons_SDP{kl} + lambda{kl}(i,j) * TT.' * M * TT;
                cons_LIN{kl} = cons_LIN{kl} + lambda{kl}(i,j) * (fi - fj);
            end
        end
    end
    cons = cons + (cons_SDP{kl} <= 0);
    cons = cons + (cons_LIN{kl} == 0);
    cons = cons + (lambda{kl} >= 0);
end
obj = tau;

solver_opt = sdpsettings('solver','mosek','verbose',verbose,'mosek.MSK_DPAR_INTPNT_CO_TOL_PFEAS',tolerance);
solverDetails=optimize(cons,-obj,solver_opt);


%% Try to grasp what happens...
if pplot
    close all;
    ak = zeros(1, N+1);
    apk= zeros(1, N+1);
    bk = zeros(1, N+1);
    ck = zeros(1, N+1);
    dk = zeros(1, N+1);
    alphak = zeros(1, N+1);
    tauk = zeros(1, N+1);
    deltak = zeros(1, N+1);
    gammak = zeros(1, N+1);
    gammakp= zeros(1, N+1);
    
    tolp = 1e-5;
    for i = 1:N+1
        ak(i)  = double(Vx{i}(1,1)).';
        apk(i) = double(Vz{i}(1,1)).';
        bk(i)  = double(Vx{i}(2,2)).';
        ck(i)  = double(Vx{i}(2,1)).';
        dk(i)  = double(vx{i}(1,1)).';
    end
    for i = 1:N
        tauk(i)   = double(lambdaLSY{i}(2)/lambdaLSY{i}(1));
        alphak(i) = -double(lambdaLSY{i}(3)/lambdaLSY{i}(1));
        deltak(i) = double(SStep{i}(1,2)/SStep{i}(1,1));
        gammak(i) = -double(SStep{i}(1,3)/SStep{i}(1,1));
        gammakp(i)= -double(SStep{i}(1,4)/SStep{i}(1,1));
    end
    
    subplot(10,1,1);
    plot(1:N+1,ak,'-b'); hold on
    subplot(10,1,2);
    plot(1:N+1,apk,'-b');
    subplot(10,1,3);
    plot(1:N+1,bk,'-b');
    subplot(10,1,4);
    plot(1:N+1,ck,'-b');
    subplot(10,1,5);
    plot(1:N+1,dk,'-b');
    subplot(10,1,6);
    plot(1:N+1,alphak,'-b');
    subplot(10,1,7);
    plot(1:N+1,tauk,'-b');
    subplot(10,1,8);
    plot(1:N+1,deltak,'-b');
    subplot(10,1,9);
    plot(1:N+1,gammak,'-b');
    subplot(10,1,10);
    plot(1:N+1,gammakp,'-b');
    
    if ssave
        labels{1} = 'k'; labels{2} = 'ak'; labels{3} = 'apk'; labels{4} = 'bk'; labels{5} = 'ck'; labels{6} = 'dk'; labels{7} = 'alphak'; labels{8} = 'tauk'; labels{9} = 'deltak'; labels{10} = 'gammak'; labels{11} = 'gammakp';
        data = [(1:N+1).' ak.'  apk.' bk.' ck.' dk.' alphak.' tauk.' deltak.' gammak.' gammakp.'];
        saveData([folder nname],data,labels);
    end
end












